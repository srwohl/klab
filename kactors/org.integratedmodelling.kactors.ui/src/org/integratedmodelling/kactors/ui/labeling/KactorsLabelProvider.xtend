/*
 * generated by Xtext 2.19.0
 */
package org.integratedmodelling.kactors.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.integratedmodelling.kactors.kactors.Actions
import org.integratedmodelling.kactors.kactors.Definition
import org.integratedmodelling.kactors.kactors.Group
import org.integratedmodelling.kactors.kactors.Match
import org.integratedmodelling.kactors.kactors.MessageCall
import org.integratedmodelling.kactors.kactors.Statement
import org.integratedmodelling.kactors.kactors.StatementList

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class KactorsLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def text(Statement statement) {
		if (statement.verb !== null) {
			return text(statement.verb)
		} else if (statement.getIf() !== null) {
			return 'if'
		} else if (statement.getWhile() !== null) {
			return 'while'
		} else if (statement.getFor() !== null) {
			return 'for'
		} else if (statement.getDo() !== null) {
			return 'for'
		} else if (statement.group !== null) {
			return text(statement.group)
		}
		
	}

	def text(Definition definition) {
		'Message ' + definition.name
	}

	def text(StatementList list) {
		if (list.next !== null) {
			return 'Sequence'
		}
		text(list.first)
	}

	def text(Match match) {
		'Match'
	}
	
	def text(Actions action) {
		'Message actions'
	}
	
	def text(Group group) {
		if (group.body !== null) {
			return 'Message group'
		}
		'Empty message'	
	}
	
	def text(MessageCall call) {
		call.name
	}

	// Labels and icons can be computed like this:
	
//	def text(Greeting ele) {
//		'A greeting to ' + ele.name
//	}
//
//	def image(Greeting ele) {
//		'Greeting.gif'
//	}
}
