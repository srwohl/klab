/*
 * generated by Xtext 2.19.0
 */
package org.integratedmodelling.kactors.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.integratedmodelling.kactors.services.KactorsGrammarAccess;

@SuppressWarnings("all")
public class KactorsSyntacticSequencer extends AbstractSyntacticSequencer {

	protected KactorsGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q;
	protected AbstractElementAlias match_Classifier_ExclusiveKeyword_1_1_1_q;
	protected AbstractElementAlias match_Classifier_ExclusiveKeyword_1_4_1_q;
	protected AbstractElementAlias match_Date___ADKeyword_1_0_or_CEKeyword_1_1__q;
	protected AbstractElementAlias match_Match_ExclusiveKeyword_8_1_1_q;
	protected AbstractElementAlias match_Match_ExclusiveKeyword_8_4_1_q;
	protected AbstractElementAlias match_MessageCall___LeftParenthesisKeyword_0_0_1_0_RightParenthesisKeyword_0_0_1_2__q;
	protected AbstractElementAlias match_Number_PlusSignKeyword_0_0_q;
	protected AbstractElementAlias match_Number_PlusSignKeyword_4_0_1_0_q;
	protected AbstractElementAlias match_TableClassifier_ExclusiveKeyword_5_1_1_q;
	protected AbstractElementAlias match_TableClassifier_ExclusiveKeyword_5_4_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (KactorsGrammarAccess) access;
		match_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_1_2()));
		match_Classifier_ExclusiveKeyword_1_1_1_q = new TokenAlias(false, true, grammarAccess.getClassifierAccess().getExclusiveKeyword_1_1_1());
		match_Classifier_ExclusiveKeyword_1_4_1_q = new TokenAlias(false, true, grammarAccess.getClassifierAccess().getExclusiveKeyword_1_4_1());
		match_Date___ADKeyword_1_0_or_CEKeyword_1_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getDateAccess().getADKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getDateAccess().getCEKeyword_1_1()));
		match_Match_ExclusiveKeyword_8_1_1_q = new TokenAlias(false, true, grammarAccess.getMatchAccess().getExclusiveKeyword_8_1_1());
		match_Match_ExclusiveKeyword_8_4_1_q = new TokenAlias(false, true, grammarAccess.getMatchAccess().getExclusiveKeyword_8_4_1());
		match_MessageCall___LeftParenthesisKeyword_0_0_1_0_RightParenthesisKeyword_0_0_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMessageCallAccess().getLeftParenthesisKeyword_0_0_1_0()), new TokenAlias(false, false, grammarAccess.getMessageCallAccess().getRightParenthesisKeyword_0_0_1_2()));
		match_Number_PlusSignKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getNumberAccess().getPlusSignKeyword_0_0());
		match_Number_PlusSignKeyword_4_0_1_0_q = new TokenAlias(false, true, grammarAccess.getNumberAccess().getPlusSignKeyword_4_0_1_0());
		match_TableClassifier_ExclusiveKeyword_5_1_1_q = new TokenAlias(false, true, grammarAccess.getTableClassifierAccess().getExclusiveKeyword_5_1_1());
		match_TableClassifier_ExclusiveKeyword_5_4_1_q = new TokenAlias(false, true, grammarAccess.getTableClassifierAccess().getExclusiveKeyword_5_4_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCAMELCASE_IDRule())
			return getCAMELCASE_IDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLOWERCASE_IDRule())
			return getLOWERCASE_IDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOBSERVABLERule())
			return getOBSERVABLEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getREGEXPRule())
			return getREGEXPToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSEPARATORRule())
			return getSEPARATORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal CAMELCASE_ID:
	 * 	('A'..'Z') ('A'..'z'|'0'..'9')*;
	 */
	protected String getCAMELCASE_IDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal LOWERCASE_ID:
	 * 	('a'..'z') ('a'..'z' | '0'..'9'| '_')*;
	 */
	protected String getLOWERCASE_IDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal OBSERVABLE:
	 * 	'{' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '\\') | !('\\' | '}'))* '}';
	 */
	protected String getOBSERVABLEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "{}";
	}
	
	/**
	 * terminal REGEXP:
	 * 	'%' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '%' | '\\') | !('\\' | '%'))* '%';
	 */
	protected String getREGEXPToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "%%";
	}
	
	/**
	 * terminal SEPARATOR:
	 * 	'---' ('-')*;
	 */
	protected String getSEPARATORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "---";
	}
	
	/**
	 * terminal STRING:
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q.equals(syntax))
				emit_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Classifier_ExclusiveKeyword_1_1_1_q.equals(syntax))
				emit_Classifier_ExclusiveKeyword_1_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Classifier_ExclusiveKeyword_1_4_1_q.equals(syntax))
				emit_Classifier_ExclusiveKeyword_1_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Date___ADKeyword_1_0_or_CEKeyword_1_1__q.equals(syntax))
				emit_Date___ADKeyword_1_0_or_CEKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Match_ExclusiveKeyword_8_1_1_q.equals(syntax))
				emit_Match_ExclusiveKeyword_8_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Match_ExclusiveKeyword_8_4_1_q.equals(syntax))
				emit_Match_ExclusiveKeyword_8_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MessageCall___LeftParenthesisKeyword_0_0_1_0_RightParenthesisKeyword_0_0_1_2__q.equals(syntax))
				emit_MessageCall___LeftParenthesisKeyword_0_0_1_0_RightParenthesisKeyword_0_0_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Number_PlusSignKeyword_0_0_q.equals(syntax))
				emit_Number_PlusSignKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Number_PlusSignKeyword_4_0_1_0_q.equals(syntax))
				emit_Number_PlusSignKeyword_4_0_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TableClassifier_ExclusiveKeyword_5_1_1_q.equals(syntax))
				emit_TableClassifier_ExclusiveKeyword_5_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TableClassifier_ExclusiveKeyword_5_4_1_q.equals(syntax))
				emit_TableClassifier_ExclusiveKeyword_5_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ANNOTATION_ID (ambiguity) (rule end)
	 */
	protected void emit_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'exclusive'?
	 *
	 * This ambiguous syntax occurs at:
	 *     int0=Number (ambiguity) 'to' int1=Number
	 */
	protected void emit_Classifier_ExclusiveKeyword_1_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'exclusive'?
	 *
	 * This ambiguous syntax occurs at:
	 *     int1=Number (ambiguity) (rule end)
	 */
	protected void emit_Classifier_ExclusiveKeyword_1_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('AD' | 'CE')?
	 *
	 * This ambiguous syntax occurs at:
	 *     year=INT (ambiguity) '-' month=INT
	 */
	protected void emit_Date___ADKeyword_1_0_or_CEKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'exclusive'?
	 *
	 * This ambiguous syntax occurs at:
	 *     int0=Number (ambiguity) 'to' int1=Number
	 */
	protected void emit_Match_ExclusiveKeyword_8_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'exclusive'?
	 *
	 * This ambiguous syntax occurs at:
	 *     int1=Number (ambiguity) '->' body=StatementList
	 */
	protected void emit_Match_ExclusiveKeyword_8_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=PathName (ambiguity) ':' actions=Actions
	 *     name=PathName (ambiguity) (rule end)
	 */
	protected void emit_MessageCall___LeftParenthesisKeyword_0_0_1_0_RightParenthesisKeyword_0_0_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) real=INT
	 */
	protected void emit_Number_PlusSignKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+'?
	 *
	 * This ambiguous syntax occurs at:
	 *     exponential?='E' (ambiguity) exp=INT
	 *     exponential?='e' (ambiguity) exp=INT
	 */
	protected void emit_Number_PlusSignKeyword_4_0_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'exclusive'?
	 *
	 * This ambiguous syntax occurs at:
	 *     int0=Number (ambiguity) 'to' int1=Number
	 */
	protected void emit_TableClassifier_ExclusiveKeyword_5_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'exclusive'?
	 *
	 * This ambiguous syntax occurs at:
	 *     int1=Number (ambiguity) (rule end)
	 */
	protected void emit_TableClassifier_ExclusiveKeyword_5_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
