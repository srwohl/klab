/**
 * generated by Xtext 2.19.0
 */
package org.integratedmodelling.kactors.kactors.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.integratedmodelling.kactors.kactors.Actions;
import org.integratedmodelling.kactors.kactors.Annotation;
import org.integratedmodelling.kactors.kactors.ArgumentDeclaration;
import org.integratedmodelling.kactors.kactors.Body;
import org.integratedmodelling.kactors.kactors.Classifier;
import org.integratedmodelling.kactors.kactors.Currency;
import org.integratedmodelling.kactors.kactors.Date;
import org.integratedmodelling.kactors.kactors.Definition;
import org.integratedmodelling.kactors.kactors.DoStatement;
import org.integratedmodelling.kactors.kactors.ForStatement;
import org.integratedmodelling.kactors.kactors.Group;
import org.integratedmodelling.kactors.kactors.HeaderRow;
import org.integratedmodelling.kactors.kactors.IfStatement;
import org.integratedmodelling.kactors.kactors.KactorsFactory;
import org.integratedmodelling.kactors.kactors.KactorsPackage;
import org.integratedmodelling.kactors.kactors.KeyValuePair;
import org.integratedmodelling.kactors.kactors.List;
import org.integratedmodelling.kactors.kactors.Literal;
import org.integratedmodelling.kactors.kactors.LookupTable;
import org.integratedmodelling.kactors.kactors.Map;
import org.integratedmodelling.kactors.kactors.MapEntry;
import org.integratedmodelling.kactors.kactors.Match;
import org.integratedmodelling.kactors.kactors.MessageBody;
import org.integratedmodelling.kactors.kactors.MessageCall;
import org.integratedmodelling.kactors.kactors.Model;
import org.integratedmodelling.kactors.kactors.ParameterList;
import org.integratedmodelling.kactors.kactors.Preamble;
import org.integratedmodelling.kactors.kactors.Quantity;
import org.integratedmodelling.kactors.kactors.REL_OPERATOR;
import org.integratedmodelling.kactors.kactors.Statement;
import org.integratedmodelling.kactors.kactors.StatementBody;
import org.integratedmodelling.kactors.kactors.StatementGroup;
import org.integratedmodelling.kactors.kactors.StatementList;
import org.integratedmodelling.kactors.kactors.Table;
import org.integratedmodelling.kactors.kactors.TableClassifier;
import org.integratedmodelling.kactors.kactors.TableRow;
import org.integratedmodelling.kactors.kactors.Unit;
import org.integratedmodelling.kactors.kactors.UnitElement;
import org.integratedmodelling.kactors.kactors.UnitOp;
import org.integratedmodelling.kactors.kactors.Value;
import org.integratedmodelling.kactors.kactors.WhileStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class KactorsFactoryImpl extends EFactoryImpl implements KactorsFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static KactorsFactory init()
  {
    try
    {
      KactorsFactory theKactorsFactory = (KactorsFactory)EPackage.Registry.INSTANCE.getEFactory(KactorsPackage.eNS_URI);
      if (theKactorsFactory != null)
      {
        return theKactorsFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new KactorsFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KactorsFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case KactorsPackage.MODEL: return createModel();
      case KactorsPackage.PREAMBLE: return createPreamble();
      case KactorsPackage.DEFINITION: return createDefinition();
      case KactorsPackage.ARGUMENT_DECLARATION: return createArgumentDeclaration();
      case KactorsPackage.MESSAGE_BODY: return createMessageBody();
      case KactorsPackage.MESSAGE_CALL: return createMessageCall();
      case KactorsPackage.STATEMENT_GROUP: return createStatementGroup();
      case KactorsPackage.STATEMENT_LIST: return createStatementList();
      case KactorsPackage.STATEMENT: return createStatement();
      case KactorsPackage.IF_STATEMENT: return createIfStatement();
      case KactorsPackage.STATEMENT_BODY: return createStatementBody();
      case KactorsPackage.WHILE_STATEMENT: return createWhileStatement();
      case KactorsPackage.DO_STATEMENT: return createDoStatement();
      case KactorsPackage.FOR_STATEMENT: return createForStatement();
      case KactorsPackage.ACTIONS: return createActions();
      case KactorsPackage.MATCH: return createMatch();
      case KactorsPackage.LIST: return createList();
      case KactorsPackage.MAP: return createMap();
      case KactorsPackage.MAP_ENTRY: return createMapEntry();
      case KactorsPackage.CLASSIFIER: return createClassifier();
      case KactorsPackage.LOOKUP_TABLE: return createLookupTable();
      case KactorsPackage.TABLE: return createTable();
      case KactorsPackage.HEADER_ROW: return createHeaderRow();
      case KactorsPackage.TABLE_ROW: return createTableRow();
      case KactorsPackage.TABLE_CLASSIFIER: return createTableClassifier();
      case KactorsPackage.QUANTITY: return createQuantity();
      case KactorsPackage.ANNOTATION: return createAnnotation();
      case KactorsPackage.LITERAL: return createLiteral();
      case KactorsPackage.PARAMETER_LIST: return createParameterList();
      case KactorsPackage.KEY_VALUE_PAIR: return createKeyValuePair();
      case KactorsPackage.VALUE: return createValue();
      case KactorsPackage.UNIT_ELEMENT: return createUnitElement();
      case KactorsPackage.UNIT: return createUnit();
      case KactorsPackage.CURRENCY: return createCurrency();
      case KactorsPackage.REL_OPERATOR: return createREL_OPERATOR();
      case KactorsPackage.NUMBER: return createNumber();
      case KactorsPackage.DATE: return createDate();
      case KactorsPackage.BODY: return createBody();
      case KactorsPackage.GROUP: return createGroup();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case KactorsPackage.UNIT_OP:
        return createUnitOpFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case KactorsPackage.UNIT_OP:
        return convertUnitOpToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Preamble createPreamble()
  {
    PreambleImpl preamble = new PreambleImpl();
    return preamble;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Definition createDefinition()
  {
    DefinitionImpl definition = new DefinitionImpl();
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArgumentDeclaration createArgumentDeclaration()
  {
    ArgumentDeclarationImpl argumentDeclaration = new ArgumentDeclarationImpl();
    return argumentDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MessageBody createMessageBody()
  {
    MessageBodyImpl messageBody = new MessageBodyImpl();
    return messageBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MessageCall createMessageCall()
  {
    MessageCallImpl messageCall = new MessageCallImpl();
    return messageCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatementGroup createStatementGroup()
  {
    StatementGroupImpl statementGroup = new StatementGroupImpl();
    return statementGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatementList createStatementList()
  {
    StatementListImpl statementList = new StatementListImpl();
    return statementList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfStatement createIfStatement()
  {
    IfStatementImpl ifStatement = new IfStatementImpl();
    return ifStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatementBody createStatementBody()
  {
    StatementBodyImpl statementBody = new StatementBodyImpl();
    return statementBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhileStatement createWhileStatement()
  {
    WhileStatementImpl whileStatement = new WhileStatementImpl();
    return whileStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoStatement createDoStatement()
  {
    DoStatementImpl doStatement = new DoStatementImpl();
    return doStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForStatement createForStatement()
  {
    ForStatementImpl forStatement = new ForStatementImpl();
    return forStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Actions createActions()
  {
    ActionsImpl actions = new ActionsImpl();
    return actions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Match createMatch()
  {
    MatchImpl match = new MatchImpl();
    return match;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public List createList()
  {
    ListImpl list = new ListImpl();
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Map createMap()
  {
    MapImpl map = new MapImpl();
    return map;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MapEntry createMapEntry()
  {
    MapEntryImpl mapEntry = new MapEntryImpl();
    return mapEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Classifier createClassifier()
  {
    ClassifierImpl classifier = new ClassifierImpl();
    return classifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LookupTable createLookupTable()
  {
    LookupTableImpl lookupTable = new LookupTableImpl();
    return lookupTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Table createTable()
  {
    TableImpl table = new TableImpl();
    return table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HeaderRow createHeaderRow()
  {
    HeaderRowImpl headerRow = new HeaderRowImpl();
    return headerRow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableRow createTableRow()
  {
    TableRowImpl tableRow = new TableRowImpl();
    return tableRow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableClassifier createTableClassifier()
  {
    TableClassifierImpl tableClassifier = new TableClassifierImpl();
    return tableClassifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Quantity createQuantity()
  {
    QuantityImpl quantity = new QuantityImpl();
    return quantity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Annotation createAnnotation()
  {
    AnnotationImpl annotation = new AnnotationImpl();
    return annotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterList createParameterList()
  {
    ParameterListImpl parameterList = new ParameterListImpl();
    return parameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KeyValuePair createKeyValuePair()
  {
    KeyValuePairImpl keyValuePair = new KeyValuePairImpl();
    return keyValuePair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitElement createUnitElement()
  {
    UnitElementImpl unitElement = new UnitElementImpl();
    return unitElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Unit createUnit()
  {
    UnitImpl unit = new UnitImpl();
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Currency createCurrency()
  {
    CurrencyImpl currency = new CurrencyImpl();
    return currency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public REL_OPERATOR createREL_OPERATOR()
  {
    REL_OPERATORImpl reL_OPERATOR = new REL_OPERATORImpl();
    return reL_OPERATOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.integratedmodelling.kactors.kactors.Number createNumber()
  {
    NumberImpl number = new NumberImpl();
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Date createDate()
  {
    DateImpl date = new DateImpl();
    return date;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Body createBody()
  {
    BodyImpl body = new BodyImpl();
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Group createGroup()
  {
    GroupImpl group = new GroupImpl();
    return group;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnitOp createUnitOpFromString(EDataType eDataType, String initialValue)
  {
    UnitOp result = UnitOp.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertUnitOpToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KactorsPackage getKactorsPackage()
  {
    return (KactorsPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static KactorsPackage getPackage()
  {
    return KactorsPackage.eINSTANCE;
  }

} //KactorsFactoryImpl
