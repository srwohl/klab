/*
 * generated by Xtext 2.12.0
 */
package org.integratedmodelling.kdl.validation

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check
import org.integratedmodelling.kdl.kdl.ActorDefinition
import org.integratedmodelling.kdl.kdl.DataflowBody
import org.integratedmodelling.kdl.kdl.KdlPackage
import org.integratedmodelling.kdl.kdl.Model

/**
 * Only basic validation for now. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class KdlValidator extends AbstractKdlValidator {

	@Check
	def checkDataflowBody(DataflowBody body) {
		if (body.semantics !== null) {
			val globals = getDataflow(body)
			if (globals !== null && globals.worldview === null) {
				error("Dataflows that specify semantics must state the worldview in the header", body,
					KdlPackage.Literals.DATAFLOW_BODY__SEMANTICS)
			}
		}
	}

	@Check
	def checkActorDefinition(ActorDefinition actor) {
		
		if (actor.targets.size > 0 && actor.type != 'annotation') {
			error("Only annotations can specify their targets", actor,
					KdlPackage.Literals.ACTOR_DEFINITION__TARGETS);
		}		
//		if (actor.localName !== null && !actor.imported) {
//				error("Only imports can specify a formal name", actor,
//					KdlPackage.Literals.ACTOR_DEFINITION__LOCAL_NAME);
//		}
		if (actor.isParameter && actor.isOptional && actor.getDefault() === null) {
				error("Optional parameters must specify a default value", actor,
					KdlPackage.Literals.ACTOR_DEFINITION__OPTIONAL);
		}
		if (actor.type !== null && actor.type === 'enum' && actor.enumValues.isEmpty) {
				error("Enum parameters must specify all enum values with 'values'", actor,
					KdlPackage.Literals.ACTOR_DEFINITION__TYPE);
		} else if (actor.getDefault() !== null && !actor.enumValues.isEmpty && actor.getDefault().enumId !== null) {
			if (!actor.enumValues.contains(actor.getDefault().enumId)) {
				error("The default value is not one of the allowed enum values", actor,
					KdlPackage.Literals.ACTOR_DEFINITION__DEFAULT);
			}
		} else if (actor.getDefault() !== null && actor.getDefault().enumId !== null && actor.enumValues.isEmpty) {
				error("Using an identifier as default is only allowed in enum typed parameters", actor,
					KdlPackage.Literals.ACTOR_DEFINITION__DEFAULT);
		}
	}
	
	def getDataflow(EObject o) {
		var ob = o
		while (ob !== null && !(ob.eContainer instanceof Model)) {
			ob = ob.eContainer
		}
		return if (ob.eContainer instanceof Model) (ob.eContainer as Model) else null
	}

}
