/*
 * generated by Xtext 2.18.0
 */
package org.integratedmodelling.kdl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.integratedmodelling.kdl.kdl.ActorDefinition;
import org.integratedmodelling.kdl.kdl.Annotation;
import org.integratedmodelling.kdl.kdl.ClassifierRHS;
import org.integratedmodelling.kdl.kdl.Computation;
import org.integratedmodelling.kdl.kdl.DataflowBody;
import org.integratedmodelling.kdl.kdl.Function;
import org.integratedmodelling.kdl.kdl.KdlPackage;
import org.integratedmodelling.kdl.kdl.KeyValuePair;
import org.integratedmodelling.kdl.kdl.List;
import org.integratedmodelling.kdl.kdl.Literal;
import org.integratedmodelling.kdl.kdl.LookupTable;
import org.integratedmodelling.kdl.kdl.Map;
import org.integratedmodelling.kdl.kdl.MapEntry;
import org.integratedmodelling.kdl.kdl.Metadata;
import org.integratedmodelling.kdl.kdl.Model;
import org.integratedmodelling.kdl.kdl.ParameterList;
import org.integratedmodelling.kdl.kdl.REL_OPERATOR;
import org.integratedmodelling.kdl.kdl.Table;
import org.integratedmodelling.kdl.kdl.TableRow;
import org.integratedmodelling.kdl.kdl.Urn;
import org.integratedmodelling.kdl.kdl.Value;
import org.integratedmodelling.kdl.services.KdlGrammarAccess;

@SuppressWarnings("all")
public class KdlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KdlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == KdlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KdlPackage.ACTOR_DEFINITION:
				sequence_ActorDefinition(context, (ActorDefinition) semanticObject); 
				return; 
			case KdlPackage.ANNOTATION:
				sequence_Annotation(context, (Annotation) semanticObject); 
				return; 
			case KdlPackage.CLASSIFIER_RHS:
				if (rule == grammarAccess.getClassifierRHSRule()) {
					sequence_ClassifierRHS(context, (ClassifierRHS) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTableClassifierRule()) {
					sequence_TableClassifier(context, (ClassifierRHS) semanticObject); 
					return; 
				}
				else break;
			case KdlPackage.COMPUTATION:
				sequence_Computation(context, (Computation) semanticObject); 
				return; 
			case KdlPackage.DATAFLOW_BODY:
				sequence_DataflowBody(context, (DataflowBody) semanticObject); 
				return; 
			case KdlPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case KdlPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case KdlPackage.LIST:
				sequence_List(context, (List) semanticObject); 
				return; 
			case KdlPackage.LITERAL:
				if (rule == grammarAccess.getLiteralOrIDRule()) {
					sequence_LiteralOrID(context, (Literal) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLiteralOrIdOrCommaRule()) {
					sequence_LiteralOrIdOrComma(context, (Literal) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLiteralRule()) {
					sequence_Literal(context, (Literal) semanticObject); 
					return; 
				}
				else break;
			case KdlPackage.LOOKUP_TABLE:
				sequence_LookupTable(context, (LookupTable) semanticObject); 
				return; 
			case KdlPackage.MAP:
				sequence_Map(context, (Map) semanticObject); 
				return; 
			case KdlPackage.MAP_ENTRY:
				sequence_MapEntry(context, (MapEntry) semanticObject); 
				return; 
			case KdlPackage.METADATA:
				sequence_Metadata(context, (Metadata) semanticObject); 
				return; 
			case KdlPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case KdlPackage.NUMBER:
				sequence_Number(context, (org.integratedmodelling.kdl.kdl.Number) semanticObject); 
				return; 
			case KdlPackage.PARAMETER:
				sequence_Parameter(context, (org.integratedmodelling.kdl.kdl.Parameter) semanticObject); 
				return; 
			case KdlPackage.PARAMETER_LIST:
				sequence_ParameterList(context, (ParameterList) semanticObject); 
				return; 
			case KdlPackage.REL_OPERATOR:
				sequence_REL_OPERATOR(context, (REL_OPERATOR) semanticObject); 
				return; 
			case KdlPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			case KdlPackage.TABLE_ROW:
				sequence_TableRow(context, (TableRow) semanticObject); 
				return; 
			case KdlPackage.URN:
				sequence_Urn(context, (Urn) semanticObject); 
				return; 
			case KdlPackage.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActorDefinition returns ActorDefinition
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         abstract?='abstract'? 
	 *         final?='final'? 
	 *         optional?='optional'? 
	 *         (exported?='export' | filter?='filter' | (imported?='import' (multiple?='multiple' | (arity=INT minimum?='+'?))?))? 
	 *         parameter?='parameter'? 
	 *         type=ACTOR 
	 *         expression?='expression'? 
	 *         (name=LOWERCASE_ID | name=LOWERCASE_DASHID | name=STRING) 
	 *         (extended=LOWERCASE_ID | extended=LOWERCASE_DASHID | extended=STRING)? 
	 *         (targets+=TARGET targets+=TARGET*)? 
	 *         docstring=STRING? 
	 *         label=STRING? 
	 *         body=DataflowBody? 
	 *         (
	 *             rangeMin=Number | 
	 *             rangeMax=Number | 
	 *             (rangeMin=Number rangeMax=Number) | 
	 *             (
	 *                 (enumValues+=STRING | enumValues+=UPPERCASE_ID | enumValues+=LOWERCASE_ID | enumValues+=CAMELCASE_ID) 
	 *                 (enumValues+=STRING | enumValues+=UPPERCASE_ID | enumValues+=LOWERCASE_ID | enumValues+=CAMELCASE_ID)*
	 *             )
	 *         )? 
	 *         default=Value? 
	 *         localName=LOWERCASE_ID? 
	 *         (coverage+=Function coverage+=Function*)?
	 *     )
	 */
	protected void sequence_ActorDefinition(ISerializationContext context, ActorDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     (name=ANNOTATION_ID parameters=ParameterList?)
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassifierRHS returns ClassifierRHS
	 *
	 * Constraint:
	 *     (
	 *         boolean='true' | 
	 *         boolean='false' | 
	 *         (int0=Number leftLimit='inclusive'? int1=Number rightLimit='inclusive'?) | 
	 *         num=Number | 
	 *         set=List | 
	 *         string=STRING | 
	 *         map=Map | 
	 *         (toResolve+=STRING toResolve+=STRING*) | 
	 *         (op=REL_OPERATOR expression=Number) | 
	 *         nodata='unknown' | 
	 *         star?='*'
	 *     )
	 */
	protected void sequence_ClassifierRHS(ISerializationContext context, ClassifierRHS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Computation returns Computation
	 *
	 * Constraint:
	 *     (functions+=Function functions+=Function*)
	 */
	protected void sequence_Computation(ISerializationContext context, Computation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataflowBody returns DataflowBody
	 *
	 * Constraint:
	 *     (dataflows+=ActorDefinition* (geometry=Geometry | computations=Computation | metadata=Metadata | javaClass=JavaClass | javaClass=STRING)*)
	 */
	protected void sequence_DataflowBody(ISerializationContext context, DataflowBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (mediated=LOWERCASE_ID | variable=LOWERCASE_ID)? 
	 *             ((name=PathName parameters=ParameterList?) | urn=Urn | value=Literal | expression=EXPR) 
	 *             target=LOWERCASE_ID?
	 *         ) | 
	 *         (chain+=Function chain+=Function*)
	 *     )
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     ((name=LOWERCASE_ID | name=LOWERCASE_DASHID) interactive?='=?'? value=Value)
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     List returns List
	 *
	 * Constraint:
	 *     contents+=Value*
	 */
	protected void sequence_List(ISerializationContext context, List semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LiteralOrID returns Literal
	 *
	 * Constraint:
	 *     (number=Number | string=STRING | boolean='true' | boolean='false' | id=ID)
	 */
	protected void sequence_LiteralOrID(ISerializationContext context, Literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LiteralOrIdOrComma returns Literal
	 *
	 * Constraint:
	 *     (
	 *         (from=Number to=Number) | 
	 *         number=Number | 
	 *         string=STRING | 
	 *         boolean='true' | 
	 *         boolean='false' | 
	 *         id=ID | 
	 *         id=LOWERCASE_ID | 
	 *         id=UPPERCASE_ID | 
	 *         comma?=','
	 *     )
	 */
	protected void sequence_LiteralOrIdOrComma(ISerializationContext context, Literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Literal returns Literal
	 *
	 * Constraint:
	 *     (number=Number | (from=Number to=Number) | string=STRING | boolean='true' | boolean='false')
	 */
	protected void sequence_Literal(ISerializationContext context, Literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LookupTable returns LookupTable
	 *
	 * Constraint:
	 *     table=Table?
	 */
	protected void sequence_LookupTable(ISerializationContext context, LookupTable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MapEntry returns MapEntry
	 *
	 * Constraint:
	 *     (classifier=ClassifierRHS value=Value)
	 */
	protected void sequence_MapEntry(ISerializationContext context, MapEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KdlPackage.Literals.MAP_ENTRY__CLASSIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KdlPackage.Literals.MAP_ENTRY__CLASSIFIER));
			if (transientValues.isValueTransient(semanticObject, KdlPackage.Literals.MAP_ENTRY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KdlPackage.Literals.MAP_ENTRY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMapEntryAccess().getClassifierClassifierRHSParserRuleCall_0_0(), semanticObject.getClassifier());
		feeder.accept(grammarAccess.getMapEntryAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Map returns Map
	 *
	 * Constraint:
	 *     (entries+=MapEntry entries+=MapEntry*)?
	 */
	protected void sequence_Map(ISerializationContext context, Map semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Metadata returns Metadata
	 *
	 * Constraint:
	 *     ((ids+=LOWERCASE_ID | ids+=PropertyId) (values+=LiteralOrID | values+=Metadata | values+=List))*
	 */
	protected void sequence_Metadata(ISerializationContext context, Metadata semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 name=Path | 
	 *                 name=UrnId | 
	 *                 variables+=Parameter | 
	 *                 constants+=Parameter | 
	 *                 authors+=STRING | 
	 *                 version=VersionNumber | 
	 *                 klabVersion=VersionNumber | 
	 *                 worldview=LOWERCASE_ID | 
	 *                 geometry=Geometry | 
	 *                 endpoint=STRING | 
	 *                 package=PathName | 
	 *                 (scale+=Function scale+=Function*) | 
	 *                 contextUrn=Urn
	 *             )+ 
	 *             actors+=ActorDefinition+
	 *         ) | 
	 *         actors+=ActorDefinition+
	 *     )?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number returns Number
	 *
	 * Constraint:
	 *     (negative?='-'? real=INT (decimal?='.' decimalPart=INT)? ((exponential?='e' | exponential?='E') expNegative?='-'? exp=INT)?)
	 */
	protected void sequence_Number(ISerializationContext context, org.integratedmodelling.kdl.kdl.Number semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterList returns ParameterList
	 *
	 * Constraint:
	 *     ((values+=Value values+=Value*) | (pairs+=KeyValuePair pairs+=KeyValuePair*))
	 */
	protected void sequence_ParameterList(ISerializationContext context, ParameterList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=LOWERCASE_ID value=Value docstring=STRING?)
	 */
	protected void sequence_Parameter(ISerializationContext context, org.integratedmodelling.kdl.kdl.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     REL_OPERATOR returns REL_OPERATOR
	 *
	 * Constraint:
	 *     (
	 *         gt?='>' | 
	 *         lt?='<' | 
	 *         eq?='=' | 
	 *         ne?='!=' | 
	 *         le?='<=' | 
	 *         ge?='>='
	 *     )
	 */
	protected void sequence_REL_OPERATOR(ISerializationContext context, REL_OPERATOR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TableClassifier returns ClassifierRHS
	 *
	 * Constraint:
	 *     (
	 *         boolean='true' | 
	 *         boolean='false' | 
	 *         (int0=Number leftLimit='inclusive'? int1=Number rightLimit='inclusive'?) | 
	 *         num=Number | 
	 *         set=List | 
	 *         string=STRING | 
	 *         (op=REL_OPERATOR expression=Number) | 
	 *         expr=EXPR | 
	 *         nodata='unknown' | 
	 *         star?='*' | 
	 *         anything?='#'
	 *     )
	 */
	protected void sequence_TableClassifier(ISerializationContext context, ClassifierRHS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TableRow returns TableRow
	 *
	 * Constraint:
	 *     (elements+=TableClassifier elements+=TableClassifier*)
	 */
	protected void sequence_TableRow(ISerializationContext context, TableRow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (rows+=TableRow rows+=TableRow*)
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Urn returns Urn
	 *
	 * Constraint:
	 *     (name=UrnId | name=STRING | name=LocalFilePath)
	 */
	protected void sequence_Urn(ISerializationContext context, Urn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Value
	 *
	 * Constraint:
	 *     (
	 *         literal=LiteralOrIdOrComma | 
	 *         function=Function | 
	 *         urn=Urn | 
	 *         list=List | 
	 *         map=Map | 
	 *         expression=EXPR | 
	 *         table=LookupTable | 
	 *         enumId=UPPERCASE_ID
	 *     )
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
