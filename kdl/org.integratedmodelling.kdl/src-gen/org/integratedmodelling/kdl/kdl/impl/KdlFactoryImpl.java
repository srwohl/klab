/**
 * generated by Xtext 2.18.0
 */
package org.integratedmodelling.kdl.kdl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.integratedmodelling.kdl.kdl.ActorDefinition;
import org.integratedmodelling.kdl.kdl.Annotation;
import org.integratedmodelling.kdl.kdl.ClassifierRHS;
import org.integratedmodelling.kdl.kdl.Computation;
import org.integratedmodelling.kdl.kdl.DataflowBody;
import org.integratedmodelling.kdl.kdl.Function;
import org.integratedmodelling.kdl.kdl.KdlFactory;
import org.integratedmodelling.kdl.kdl.KdlPackage;
import org.integratedmodelling.kdl.kdl.KeyValuePair;
import org.integratedmodelling.kdl.kdl.List;
import org.integratedmodelling.kdl.kdl.Literal;
import org.integratedmodelling.kdl.kdl.LookupTable;
import org.integratedmodelling.kdl.kdl.Map;
import org.integratedmodelling.kdl.kdl.MapEntry;
import org.integratedmodelling.kdl.kdl.Metadata;
import org.integratedmodelling.kdl.kdl.Model;
import org.integratedmodelling.kdl.kdl.Parameter;
import org.integratedmodelling.kdl.kdl.ParameterList;
import org.integratedmodelling.kdl.kdl.REL_OPERATOR;
import org.integratedmodelling.kdl.kdl.Table;
import org.integratedmodelling.kdl.kdl.TableRow;
import org.integratedmodelling.kdl.kdl.Urn;
import org.integratedmodelling.kdl.kdl.Value;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class KdlFactoryImpl extends EFactoryImpl implements KdlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static KdlFactory init()
  {
    try
    {
      KdlFactory theKdlFactory = (KdlFactory)EPackage.Registry.INSTANCE.getEFactory(KdlPackage.eNS_URI);
      if (theKdlFactory != null)
      {
        return theKdlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new KdlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KdlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case KdlPackage.MODEL: return createModel();
      case KdlPackage.ANNOTATION: return createAnnotation();
      case KdlPackage.ACTOR_DEFINITION: return createActorDefinition();
      case KdlPackage.DATAFLOW_BODY: return createDataflowBody();
      case KdlPackage.COMPUTATION: return createComputation();
      case KdlPackage.PARAMETER: return createParameter();
      case KdlPackage.CLASSIFIER_RHS: return createClassifierRHS();
      case KdlPackage.LIST: return createList();
      case KdlPackage.LITERAL: return createLiteral();
      case KdlPackage.METADATA: return createMetadata();
      case KdlPackage.PARAMETER_LIST: return createParameterList();
      case KdlPackage.VALUE: return createValue();
      case KdlPackage.URN: return createUrn();
      case KdlPackage.MAP: return createMap();
      case KdlPackage.MAP_ENTRY: return createMapEntry();
      case KdlPackage.LOOKUP_TABLE: return createLookupTable();
      case KdlPackage.TABLE: return createTable();
      case KdlPackage.TABLE_ROW: return createTableRow();
      case KdlPackage.KEY_VALUE_PAIR: return createKeyValuePair();
      case KdlPackage.FUNCTION: return createFunction();
      case KdlPackage.REL_OPERATOR: return createREL_OPERATOR();
      case KdlPackage.NUMBER: return createNumber();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Annotation createAnnotation()
  {
    AnnotationImpl annotation = new AnnotationImpl();
    return annotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActorDefinition createActorDefinition()
  {
    ActorDefinitionImpl actorDefinition = new ActorDefinitionImpl();
    return actorDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataflowBody createDataflowBody()
  {
    DataflowBodyImpl dataflowBody = new DataflowBodyImpl();
    return dataflowBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Computation createComputation()
  {
    ComputationImpl computation = new ComputationImpl();
    return computation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassifierRHS createClassifierRHS()
  {
    ClassifierRHSImpl classifierRHS = new ClassifierRHSImpl();
    return classifierRHS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List createList()
  {
    ListImpl list = new ListImpl();
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Metadata createMetadata()
  {
    MetadataImpl metadata = new MetadataImpl();
    return metadata;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParameterList createParameterList()
  {
    ParameterListImpl parameterList = new ParameterListImpl();
    return parameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Urn createUrn()
  {
    UrnImpl urn = new UrnImpl();
    return urn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Map createMap()
  {
    MapImpl map = new MapImpl();
    return map;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MapEntry createMapEntry()
  {
    MapEntryImpl mapEntry = new MapEntryImpl();
    return mapEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LookupTable createLookupTable()
  {
    LookupTableImpl lookupTable = new LookupTableImpl();
    return lookupTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Table createTable()
  {
    TableImpl table = new TableImpl();
    return table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TableRow createTableRow()
  {
    TableRowImpl tableRow = new TableRowImpl();
    return tableRow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KeyValuePair createKeyValuePair()
  {
    KeyValuePairImpl keyValuePair = new KeyValuePairImpl();
    return keyValuePair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public REL_OPERATOR createREL_OPERATOR()
  {
    REL_OPERATORImpl reL_OPERATOR = new REL_OPERATORImpl();
    return reL_OPERATOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.integratedmodelling.kdl.kdl.Number createNumber()
  {
    NumberImpl number = new NumberImpl();
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KdlPackage getKdlPackage()
  {
    return (KdlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static KdlPackage getPackage()
  {
    return KdlPackage.eINSTANCE;
  }

} //KdlFactoryImpl
