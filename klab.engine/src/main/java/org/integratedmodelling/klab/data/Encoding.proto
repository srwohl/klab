syntax = "proto3";
package org.integratedmodelling.klab.data.encoding;

/**
 * The data response to a URN get() request. Will contain a state or one or more objects,
 * with the correspondent geometry for validation and optional semantics.
 */
message KlabData {

	enum Severity {
		INFO = 0;
		WARNING = 1;
		ERROR = 2;
		DEBUG = 3;
	}

	message Notification {
		string text = 1;
		Severity severity = 2;
	}

	message Object {
		string name = 1;
		map<string, string> properties = 2;
		repeated State states = 3;
		repeated Object objects = 4;
		string geometry = 5;
		map<string,string> metadata = 6;
	}
	
	message LookupTable {
		map<uint32, string> table = 1;
	} 
	
	// check the externalDatasourceUrl for data too large to fit in the response.	
	message State {
		string name = 1;
		string semantics = 2;
		repeated double doubledata = 3;
		// if this is set, it comes with a LookupTable
		repeated uint32 tabledata = 4;
		repeated sint64 intdata = 5;
		repeated bool booleandata = 6;
		LookupTable table = 7;
		string externalDatasourceUrl = 8;
		map<string,string> metadata = 9;
	}

	string geometry = 1;
	// the semantics field may carry a URN in a contextualization request 
	// encoded as a single KlabData object. Otherwise it's provided for 
	// future usage (and should probably come with a worldview field).
	string semantics = 2;
	int64  elapsed = 3;
	
	// if there is 1+ notification with ERROR severity, the next fields should not be set.
	repeated Notification notifications = 4;
	
	// these two should be in a oneof , but no joy there.
	repeated Object objects = 5;
	repeated State states = 6;
	
	// if this is true, we just sent a byte to say that time has passed but the data are as before.
	int32 noChange = 7;
}