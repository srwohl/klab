/**
 * This file defines the contract for functions compiled by the runtime into dataflow calls. These
 * are normally not seen by users.
 */
@klab 0.10.0
@version 0.10.0
@namespace klab.runtime

export value exec
	"Return an appropriate contextualizer for an expression."
	label 'Evaluate'
{
	
	value expression code
		"The code to be executed"
		
	optional boolean expression ifcondition 
		"A condition to check before executing the code" 

	optional boolean expression unlesscondition 
		"A negative conditions to check before executing the code" 
		
	optional boolean scalar
		"Run the expression in a scalar context independent of the result of code analysis."
		default false

	optional text language 
		"The language of the expression" 
		default "groovy"
		
	class org.integratedmodelling.klab.components.runtime.contextualizers.ExpressionResolver
}

export value literal
	"Return a mediating resolver that wraps a state into another with compatible, but 
	 different value semantics"
	 label '$val'
{
	object val
		"The value to be contextualized"
				
	class org.integratedmodelling.klab.components.runtime.contextualizers.LiteralStateResolver
}

filter number convert
	"Convert a numeric state from a unit, range or currency to a compatible other."
	label '$original to $target'
{
	value 'original'
		"The value mediator (unit, range, currency) describing the source values"

	value 'target'
		"The value mediator (unit, range, currency) describing the target values"

	optional import number artifact 
		"The artifact to convert. Defaults to the target artifact."
				
	class org.integratedmodelling.klab.components.runtime.contextualizers.ConversionResolver

}

filter concept classify
	"Return a state contextualizer that classifies its input into a concept"
	label 'Classify'
{
	
	value classification
		"A classification stated in k.IM or built from a trait, class or metadata property"

	class org.integratedmodelling.klab.components.runtime.contextualizers.ClassifyingStateResolver

}

filter object classifier
	"Classify an object by a predicate, attributing a concrete value based on the 
     return value of an expression."
	label 'Classify' 
{
	optional import object artifact
		"The object artifact whose objects we classify" 
	
	concept expression code 
		"The expression producing the concrete semantics for the base predicate"
		
    optional boolean expression ifcondition 
		"A condition to check before executing the code" 

	optional boolean expression unlesscondition 
		"A negative conditions to check before executing the code" 
		
	class org.integratedmodelling.klab.components.runtime.contextualizers.ExpressionClassifier
		
}

filter object characterizer
	"Characterize an object based on having a particular predicate. Only does side-effect observations."
	label 'Characterize' 
{
	optional import object artifact
		"The object artifact whose objects we classify" 
	
	concept expression code 
		"The expression producing the concrete semantics for the base predicate"
		
    optional boolean expression ifcondition 
		"A condition to check before executing the code" 

	optional boolean expression unlesscondition 
		"A negative conditions to check before executing the code" 
		
	class org.integratedmodelling.klab.components.runtime.contextualizers.ExpressionCharacterizer
		
}

filter value categorize 
	"Aggregate values of one state when they correspond to the same value of another."
	label "Aggregate by $classifier"
{
	optional import value artifact
		"The artifact to categorize" 
		
	import value classifier
		"The artifact to categorize by" 

	class org.integratedmodelling.klab.components.runtime.contextualizers.CategoryClassificationResolver

}

filter value transform
	"Transform a state by applying an operator and an optional operand, which may be another state."
	label "$operator"
{
	optional import value artifact
		"The artifact to categorize" 

	optional value 'value'
		"The literal to use as operand. Not passed only if the operator is unary." 

	optional value state
		"The operand when it is another state." 
		
	import enum operator
		"The artifact to categorize by"
		values GREATER, LESS, GREATEREQUAL, LESSEQUAL, IS, SAMEAS, WITHOUT, WHERE, PLUS, MINUS, TIMES, OVER, TOTAL
		
	class org.integratedmodelling.klab.components.runtime.contextualizers.ValueOperatorResolver

}

filter value aggregate 
	"Aggregate values of one state when they overlap the same object. Should be used with non-overlapping
	 spatial aggregators."
	label "Aggregate by $classifier"
{
	optional import value artifact
		"The artifact to categorize" 
		
	import object 'classifier'
		"The artifact providing the coverage for classification." 

	class org.integratedmodelling.klab.components.runtime.contextualizers.ObjectClassificationResolver

}

filter value lookup
	"Return a state contextualizer that classifies its inputs using a lookup table"
	label 'Lookup table'
{
	
	value table
		"A table stated in k.IM"

	value arguments 
		"A set of arguments to match to the columns of the table"

	class org.integratedmodelling.klab.components.runtime.contextualizers.LookupStateResolver

}

export value contextualize
	"Return a resolver for a URN-specified resource"
	label 'Extract data from URN'
{
	
	text urn
		"The URN pointing to the resource to be resolved and retrieved"
				
	class org.integratedmodelling.klab.components.runtime.contextualizers.UrnResolver
}

export value timeseries
	"Return a resolver for multiple time-sensitive URN-specified resources or models"
	label 'Extract data from URNs'
{
	
	list urns
		"URNs of the models and resources to merge temporally"
				
	class org.integratedmodelling.klab.components.runtime.contextualizers.mergers.MergedUrnResolver
}

export object instantiate
	"Return an instantiator for a URN-specified resource"
	label 'Extract objects from URN'
{
	
	text urn
		"The URN pointing to the resource to be resolved and retrieved"
				
	class org.integratedmodelling.klab.components.runtime.contextualizers.UrnInstantiator

}

export object timechooser
	"Return a time-sensitive instantiator for urns or models"
	label 'Extract objects from URN'
{
	
	list urns
		"URNs of the models and resources to merge temporally"
				
	class org.integratedmodelling.klab.components.runtime.contextualizers.mergers.MergedUrnInstantiator

}

filter value cast
	"Return a state resolver that will convert a value from a type to another"
	label '$source to $destination'
{
	optional import number artifact 
		"The artifact to cast. Defaults to the target artifact."
	
	enum source
		"The source type of the value"
		values NUMBER, BOOLEAN, TEXT, CONCEPT
		
	enum destination
		"The destination type of the value"
		values NUMBER, BOOLEAN, TEXT, CONCEPT
				
	class org.integratedmodelling.klab.components.runtime.contextualizers.CastingStateResolver
}

export value conditional
	"Wrap a function call that produces a contextualizer, created only if the passed condition evaluates to true."
{
	
	boolean expression condition
		"The condition for the contextualizer to be returned."
				
	class org.integratedmodelling.klab.components.runtime.contextualizers.wrappers.ConditionalContextualizer
}