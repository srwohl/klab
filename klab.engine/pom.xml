<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.integratedmodelling</groupId>
		<artifactId>klab</artifactId>
		<version>0.10.0-SNAPSHOT</version>
	</parent>
	<artifactId>klab.engine</artifactId>

	<!-- wanted by jgrasstools and osm4j. Would be lovely to avoid these. -->
	<repositories>
		<!-- <repository> <id>simulation</id> <url>http://www.simulation.tudelft.nl/maven</url> 
			</repository> <repository> <id>sk-3</id> <url>http://simulation.tudelft.nl/maven</url> 
			</repository> -->
		<repository>
			<id>topobyte</id>
			<url>http://mvn.topobyte.de</url>
		</repository>
		<repository>
			<id>slimjars</id>
			<url>http://mvn.slimjars.com</url>
		</repository>
	</repositories>

	<build>
		<pluginManagement>
			<plugins>
				<!-- <plugin> <artifactId>kotlin-maven-plugin</artifactId> <groupId>org.jetbrains.kotlin</groupId> 
					<version>${kotlin.version}</version> <executions> <execution> <id>compile</id> 
					<goals> <goal>compile</goal> </goals> <configuration> <sourceDirs> <sourceDir>${project.basedir}/src/main/java</sourceDir> 
					</sourceDirs> </configuration> </execution> <execution> <id>test-compile</id> 
					<goals> <goal>test-compile</goal> </goals> <configuration> <sourceDirs> <sourceDir>${project.basedir}/src/test/java</sourceDir> 
					</sourceDirs> </configuration> </execution> </executions> </plugin> -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<!-- 2.8.0-01 and later require maven-compiler-plugin 3.1 or higher -->
					<version>3.8.0</version>
					<configuration>
						<compilerId>groovy-eclipse-compiler</compilerId>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.codehaus.groovy</groupId>
							<artifactId>groovy-eclipse-compiler</artifactId>
							<version>3.6.0-03</version>
						</dependency>
						<!-- for 2.8.0-01 and later you must have an explicit dependency on 
							groovy-eclipse-batch -->
						<dependency>
							<groupId>org.codehaus.groovy</groupId>
							<artifactId>groovy-eclipse-batch</artifactId>
							<version>2.5.9-01</version>
							<!-- <version>2.5.9-01</version> -->
							<!-- or choose a different compiler version -->
							<!-- <version>1.8.6-01</version> -->
							<!-- <version>1.7.10-06</version> -->
						</dependency>
					</dependencies>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-jar-plugin</artifactId> 
				<version>2.4</version> <executions> <execution> <phase>process-classes</phase> 
				<goals> <goal>jar</goal> </goals> <configuration> <archive> <manifestEntries> 
				<premain-class>org.javabenchmark.instrumentation.Agent</premain-class> </manifestEntries> 
				</archive> </configuration> </execution> </executions> </plugin> <plugin> 
				<groupId>org.apache.maven.plugins</groupId> <artifactId>maven-surefire-plugin</artifactId> 
				<version>2.14</version> <configuration> <argline>-javaagent:target/${project.build.finalName}.jar</argline> 
				</configuration> </plugin> -->
		</plugins>
	</build>
	<dependencies>

		<!-- Unirest, while redundant with Spring templates, removes a lot of pain 
			when doing quick REST interactions -->
		<dependency>
			<groupId>com.konghq</groupId>
			<artifactId>unirest-java</artifactId>
			<version>3.4.03</version>
			<classifier>standalone</classifier>
		</dependency>
		<dependency>
			<groupId>com.konghq</groupId>
			<artifactId>unirest-objectmapper-jackson</artifactId>
			<version>3.4.03</version>
		</dependency>

		<!-- tiny Jar to pluralize subject names for folder IDs -->
		<dependency>
			<groupId>org.atteo</groupId>
			<artifactId>evo-inflector</artifactId>
			<version>1.2.2</version>
		</dependency>

		<!-- velocity-engine-core for dataflow doc templates -->
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity-engine-core</artifactId>
			<version>2.1</version>
		</dependency>

		<!-- gexf4j to export networks as GEXF -->
		<dependency>
			<groupId>it.uniroma1.dis.wsngroup.gexf4j</groupId>
			<artifactId>gexf4j</artifactId>
			<version>0.4.3-BETA</version>
			<exclusions>
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- MapDB for various persistent caches. Simple, used it a lot, never 
			a problem. -->
		<dependency>
			<groupId>org.mapdb</groupId>
			<artifactId>mapdb</artifactId>
			<version>3.0.7</version>
			<exclusions>
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-math3 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-math3</artifactId>
			<version>3.6.1</version>
		</dependency>

		<!-- flexmark for Markdown processing in report generation -->
		<dependency>
			<groupId>com.vladsch.flexmark</groupId>
			<artifactId>flexmark-all</artifactId>
			<version>0.34.28</version>
		</dependency>

		<!-- osm4j suite -->
		<dependency>
			<groupId>de.topobyte</groupId>
			<artifactId>osm4j-core</artifactId>
			<version>0.1.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>de.topobyte</groupId>
			<artifactId>osm4j-xml</artifactId>
			<version>0.1.2</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>de.topobyte</groupId>
			<artifactId>osm4j-geometry</artifactId>
			<version>0.1.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>de.topobyte</groupId>
			<artifactId>osm4j-utils</artifactId>
			<version>0.1.2</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- <dependency> <groupId>de.topobyte</groupId> <artifactId>jts2awt</artifactId> 
			<version>0.0.1</version> <exclusions> <exclusion> <groupId>org.slf4j</groupId> 
			<artifactId>slf4j-log4j12</artifactId> </exclusion> </exclusions> </dependency> 
			<dependency> <groupId>de.topobyte</groupId> <artifactId>mercator-image</artifactId> 
			<version>0.0.2</version> <exclusions> <exclusion> <groupId>org.slf4j</groupId> 
			<artifactId>slf4j-log4j12</artifactId> </exclusion> </exclusions> </dependency> -->

		<!-- all of a sudden, WCS parsing stops working unless this is added. -->
		<dependency>
			<groupId>xml-apis</groupId>
			<artifactId>xml-apis</artifactId>
			<version>1.4.01</version>
		</dependency>

		<!-- Elk core for dataflow diagramming -->
		<dependency>
			<groupId>org.eclipse.elk</groupId>
			<artifactId>org.eclipse.elk.core</artifactId>
			<version>0.4.1</version>
			<exclusions>
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.eclipse.elk</groupId>
			<artifactId>org.eclipse.elk.graph.json</artifactId>
			<version>0.4.1</version>
			<exclusions>
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.eclipse.elk</groupId>
			<artifactId>org.eclipse.elk.core.meta</artifactId>
			<version>0.4.1</version>
			<exclusions>
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.eclipse.elk</groupId>
			<artifactId>org.eclipse.elk.alg.layered</artifactId>
			<version>0.4.1</version>
			<exclusions>
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- zip resources for publishing -->
		<dependency>
			<groupId>net.lingala.zip4j</groupId>
			<artifactId>zip4j</artifactId>
			<version>1.3.2</version>
		</dependency>

		<!-- Open Provenance toolkit. Older stuff, must exclude gson to avoid messing 
			up Spring. -->
		<dependency>
			<groupId>org.openprovenance.prov</groupId>
			<artifactId>prov-model</artifactId>
			<version>0.7.3</version>
			<exclusions>
				<exclusion>
					<groupId>com.google.code.gson</groupId>
					<artifactId>gson</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.openprovenance.prov</groupId>
			<artifactId>prov-interop</artifactId>
			<version>0.7.3</version>
			<exclusions>
				<exclusion>
					<groupId>com.google.code.gson</groupId>
					<artifactId>gson</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Lucene for indexing -->
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-core</artifactId>
			<version>7.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-suggest</artifactId>
			<version>7.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-spatial</artifactId>
			<version>7.4.0</version>
		</dependency>
		<!-- query parser is just for testing at the moment -->
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-queryparser</artifactId>
			<version>7.4.0</version>
		</dependency>

		<!-- JUNG for network analysis, generation and I/O. Visualization only 
			included in test scope. -->
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-graph-impl</artifactId>
			<version>${jung.version}</version>
		</dependency>
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-algorithms</artifactId>
			<version>${jung.version}</version>
		</dependency>
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-io</artifactId>
			<version>${jung.version}</version>
		</dependency>
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-visualization</artifactId>
			<version>${jung.version}</version>
			<!-- TODO reintegrate! <scope>test</scope> -->
		</dependency>
		<!-- TODO temporary! Just to learn the API -->
		<dependency>
			<groupId>net.sf.jung</groupId>
			<artifactId>jung-samples</artifactId>
			<version>${jung.version}</version>
			<!-- <scope>test</scope> -->
		</dependency>

		<dependency>
			<groupId>org.javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.14.0-GA</version>
			<type>jar</type>
		</dependency>

		<!-- Websockets support -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-websocket</artifactId>
			<version>${spring-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-messaging</artifactId>
			<version>${spring-version}</version>
		</dependency>

		<!-- Kotlin support <dependency> <groupId>org.jetbrains.kotlin</groupId> 
			<artifactId>kotlin-stdlib</artifactId> <version>${kotlin.version}</version> 
			</dependency> <dependency> <groupId>com.fasterxml.jackson.module</groupId> 
			<artifactId>jackson-module-kotlin</artifactId> <version>2.9.5</version> </dependency> -->

		<!-- JSON schema extraction -->
		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId>jackson-module-jsonSchema</artifactId>
			<version>2.9.5</version>
			<exclusions>
				<exclusion>
					<!-- uses 1.1.0, which messes up Spring -->
					<groupId>javax.validation</groupId>
					<artifactId>validation-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-core -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
			<version>${spring-boot-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>${spring-boot-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
			<version>${spring-boot-version}</version>
		</dependency>
		<dependency>
			<groupId>org.integratedmodelling</groupId>
			<artifactId>org.integratedmodelling.klab.api</artifactId>
			<version>${klab.version}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.eclipse.xtext/org.eclipse.xtext -->
		<dependency>
			<groupId>org.eclipse.xtext</groupId>
			<artifactId>org.eclipse.xtext</artifactId>
			<version>${xtextVersion}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.eclipse.xtext/org.eclipse.xtext.util -->
		<dependency>
			<groupId>org.eclipse.xtext</groupId>
			<artifactId>org.eclipse.xtext.util</artifactId>
			<version>${xtextVersion}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.eclipse.xtext/org.eclipse.xtext.testing 
			Used in compile scope to provide simple, reentrant parser injector for repeated 
			calls to declaration parser. -->
		<dependency>
			<groupId>org.eclipse.xtext</groupId>
			<artifactId>org.eclipse.xtext.testing</artifactId>
			<version>${xtextVersion}</version>
		</dependency>

		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>${joda-time-version}</version>
		</dependency>

		<!-- ijblob - feature extractor for spatial rasters -->
		<dependency>
			<groupId>de.biomedical-imaging.ij</groupId>
			<artifactId>ij_blob</artifactId>
			<version>1.4.9</version>
		</dependency>

		<!-- classpath scanning; this can be removed in favor of Spring's PathMatchingResourcePatternResolver, 
			but Spring shouldn't be needed in the embedded engine and the API is better 
			here. -->
		<dependency>
			<groupId>org.reflections</groupId>
			<artifactId>reflections</artifactId>
			<version>0.9.11</version>
		</dependency>

		<!-- Groovy -->
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy</artifactId>
			<!-- <version>2.5.0-beta-2</version> -->
			<version>2.5.9</version>
			<classifier>indy</classifier>
		</dependency>

		<!-- basic graph API -->
		<dependency>
			<groupId>org.jgrapht</groupId>
			<artifactId>jgrapht-core </artifactId>
			<version>1.1.0</version>
		</dependency>

		<!-- OWL and DL reasoning -->
		<dependency>
			<groupId>net.sourceforge.owlapi</groupId>
			<artifactId>owlapi-distribution </artifactId>
			<version>3.4.10</version>
		</dependency>
		<dependency>
			<groupId>com.hermit-reasoner</groupId>
			<artifactId>org.semanticweb.hermit</artifactId>
			<version>1.3.8.4</version>
		</dependency>

		<!-- spatial H2 database for kboxes -->
		<dependency>
			<groupId>org.orbisgis</groupId>
			<artifactId>h2spatial</artifactId>
			<version>1.2.4</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/args4j/args4j startup options parser -->
		<dependency>
			<groupId>args4j</groupId>
			<artifactId>args4j</artifactId>
			<version>2.33</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java -->
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>3.11.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java-util -->
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java-util</artifactId>
			<version>3.11.1</version>
		</dependency>

		<!-- GEOTOOLS mess starts -->
		<!-- <dependency> <groupId>org.geotools</groupId> <artifactId>gt-metadata</artifactId> 
			<version>${geotools.version}</version> </dependency> -->
		<dependency>
			<groupId>org.geotools</groupId>
			<artifactId>gt-referencing</artifactId>
			<version>${geotools.version}</version>
		</dependency>
		<dependency>
			<groupId>org.geotools</groupId>
			<artifactId>gt-epsg-hsql</artifactId>
			<version>${geotools.version}</version>
		</dependency>
		<dependency>
			<groupId>org.geotools</groupId>
			<artifactId>gt-shapefile</artifactId>
			<version>${geotools.version}</version>
		</dependency>
		<dependency>
			<groupId>org.geotools</groupId>
			<artifactId>gt-geotiff</artifactId>
			<version>${geotools.version}</version>
		</dependency>
		<dependency>
			<groupId>org.geotools</groupId>
			<artifactId>gt-epsg-extension</artifactId>
			<version>${geotools.version}</version>
		</dependency>
		<dependency>
			<groupId>org.geotools</groupId>
			<artifactId>gt-brewer</artifactId>
			<version>${geotools.version}</version>
		</dependency>
		<!-- GEOTOOLS mess ends -->

		<!-- NO2 database (for local storage of file metadata and URN metadata 
			caching) <dependency> <groupId>org.dizitart</groupId> <artifactId>nitrite</artifactId> 
			<version>3.0.0</version> </dependency> -->

		<!-- Actor system (for the default runtime provider) -->
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-actor-typed_2.12</artifactId>
			<version>2.6.1</version>
		</dependency>

		<!-- ENGINE DEBUGGING/VISUALIZATION DEPS -->

		<!-- for map display with JMapFrame/MapDisplay -->
		<dependency>
			<groupId>org.geotools</groupId>
			<artifactId>gt-render</artifactId>
			<version>${geotools.version}</version>
		</dependency>
		<dependency>
			<groupId>org.geotools</groupId>
			<artifactId>gt-swing</artifactId>
			<version>${geotools.version}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.jgrapht/jgrapht-ext -->
		<dependency>
			<groupId>org.jgrapht</groupId>
			<artifactId>jgrapht-ext</artifactId>
			<version>1.1.0</version>
		</dependency>

		<dependency>
			<groupId>com.kjetland</groupId>
			<artifactId>mbknor-jackson-jsonschema_2.12</artifactId>
			<version>1.0.29</version>
		</dependency>

		<!-- swagger for API docs -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.9.2</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.9.2</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>28.0-jre</version>
		</dependency>

		<!-- Kotlin support <dependency> <groupId>org.jetbrains.kotlin</groupId> 
			<artifactId>kotlin-stdlib-jdk8</artifactId> <version>${kotlin.version}</version> 
			</dependency> -->
		<!-- DUPLICATE <dependency> <groupId>org.integratedmodelling</groupId> 
			<artifactId>org.integratedmodelling.klab.api</artifactId> <version>${klab.version}</version> 
			</dependency> -->
		<dependency>
			<groupId>org.integratedmodelling</groupId>
			<artifactId>org.integratedmodelling.kim</artifactId>
			<version>${klab.version}</version>
		</dependency>
		<dependency>
			<groupId>org.integratedmodelling</groupId>
			<artifactId>org.integratedmodelling.kdl</artifactId>
			<version>${klab.version}</version>
		</dependency>
		<dependency>
			<groupId>com.verhas</groupId>
			<artifactId>license3j</artifactId>
			<version>1.0.7</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
			<version>2.2</version>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2</version>
		</dependency>
		<dependency>
			<groupId>commons-codec </groupId>
			<artifactId>commons-codec </artifactId>
			<version>1.9</version>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
		</dependency>

		<!-- for @Nullable and the like -->
		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>3.0.2</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit -->
		<dependency>
			<groupId>org.eclipse.jgit</groupId>
			<artifactId>org.eclipse.jgit</artifactId>
			<version>4.4.0.201606070830-r</version>
		</dependency>

		<!-- CLIENT DEPENDENCIES -->
		<dependency>
			<groupId>org.apache.maven.shared</groupId>
			<artifactId>maven-invoker </artifactId>
			<version>2.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-exec</artifactId>
			<version>1.2</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.jscience/jscience -->
		<!-- https://mvnrepository.com/artifact/org.integratedmodelling/jscience -->
		<!-- TODO find a way to use the official Maven package, which contains 
			OGC implementations incompatible with Geotool's -->
		<dependency>
			<groupId>org.integratedmodelling</groupId>
			<artifactId>jscience</artifactId>
			<version>4.3.1</version>
		</dependency>

	</dependencies>
</project>