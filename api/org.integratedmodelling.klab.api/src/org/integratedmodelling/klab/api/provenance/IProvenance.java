/*
 * This file is part of k.LAB.
 * 
 * k.LAB is free software: you can redistribute it and/or modify
 * it under the terms of the Affero GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * A copy of the GNU Affero General Public License is distributed in the root
 * directory of the k.LAB distribution (LICENSE.txt). If this cannot be found 
 * see <http://www.gnu.org/licenses/>.
 * 
 * Copyright (C) 2007-2018 integratedmodelling.org and any authors mentioned
 * in author tags. All rights reserved.
 */
package org.integratedmodelling.klab.api.provenance;

import java.util.Collection;
import java.util.List;

import org.integratedmodelling.kim.api.IKimModel;
import org.integratedmodelling.klab.api.auth.IEngineIdentity;
import org.integratedmodelling.klab.api.auth.IUserIdentity;
import org.integratedmodelling.klab.api.data.IResource;
import org.integratedmodelling.klab.api.model.IModel;
import org.integratedmodelling.klab.api.observations.IObservation;
import org.integratedmodelling.klab.api.runtime.dataflow.IDataflow;

/**
 * Provenance in k.LAB is expressed according to the Open Provenance Model
 * (OPM), described in detail at
 * <a href="https://openprovenance.org">https://openprovenance.org</a> and the
 * correspondent W3C documents. The internal representation is more packed than
 * the standard OPM graph, for ease of implementation and use, and can be
 * expanded into it when exporting the graph.
 * <p>
 * All k.LAB objects are mapped to the OPM according to the following
 * conventions:
 * <p>
 * All OPM Entities, including Bundles but not Plans, are {@link IArtifact}s,
 * typically {@link IObservation}s. A model (provided by a contributor or built
 * by k.LAB, such as in learning) is also an artifact: in this case, the model
 * artifact is its {@link IKimModel syntactic specification}, not a
 * {@link IModel runtime} incarnation of the model, which is an Agent.
 * <p>
 * The equivalent of a OPM Plan is a {@link IDataflow}, which organizes model
 * Agents into a strategy to perform Activities. The latter are
 * <strong>observation activities</strong> and are typed according to
 * {@link IActivity.Description}: they may be acknowledgements, computations
 * (either resolutions or instantiations) or detections.
 * <p>
 * The observation Activities are organized into super-activities (processes)
 * correspondent to ITask identities in k.LAB. The responsibility for Activities
 * is attributed to Agents, which may be {@link IUserIdentity} or the AI in
 * k.LAB (for attribution of tasks and acknowledgements) or {@link IModel
 * models} for attribution of individual observation activities. Model agents
 * are associated with the correspondent model artifact, which holds further
 * provenance info. In the k.LAB graph the model agent and the model artifact
 * are just coalesced, as IModel contains its statement. In the full OPM graph,
 * the model artifact is the plan that was followed, by the model agent, in
 * executing the computation activity that created other artifacts.
 * <p>
 * The models' sequential execution is driven by a {@link IDataflow}, which is
 * an entity of type Plan, attributed to the AI in k.LAB, an agent representing
 * the {@link IEngineIdentity} that built and ran it. The plan acts within a
 * delegation from a user to the engine. All models run within a dataflow are
 * associated with it. One provenance graph collects all dataflows run to
 * compute all the artifacts within the same root context. The opportunity to
 * include nodes for partners and delegation will be explored later.
 * <p>
 * The artifacts generated by the models are arranged in terms of antecedents
 * and consequents through DerivedBy relationships representing the dependency
 * structure in the model agents.
 * <p>
 * Any {@link IResource}s used by models (data or computations) come with
 * compatible provenance records, which are merged with the provenance graph
 * built during contextualization to produce a full provenance document for an
 * observation context. Implementations can also complement those with details
 * about the hosting nodes and contribution to the k.LAB network as appropriate.
 * <p>
 * Provenance nodes are linked to their k.LAB incarnations through standardized
 * attributes: the provenance graph should not link the k.LAB objects directly.
 * 
 * @author Ferd
 * @version $Id: $Id
 */
public interface IProvenance {
	
	/**
	 * Everything except Actions is a node. Used only to allow generalizing the API.
	 * 
	 * @author Ferd
	 */
	abstract interface Node {

		/**
		 * A unique string ID.
		 * 
		 * @return
		 */
		String getId();

		/**
		 * Timestamp of creation.
		 * 
		 * @return
		 */
		long getTimestamp();

		/**
		 * Return all the actions that have interested this node in chronological order.
		 *
		 * @return a {@link java.util.List} object.
		 */
		List<IActivity> getActions();
		
		/**
		 * Return the graph we're part of.
		 * 
		 * @return the provenance graph
		 */
		IProvenance getProvenance();

		/**
		 * Workflows that end in disappointment produce these.
		 * 
		 * @return true if empty
		 */
		boolean isEmpty();
	}

	/**
	 * True if there's nothing to see.
	 *
	 * @return true if empty
	 */
	boolean isEmpty();

	/**
	 * Return all the primary actions in chronological order.
	 *
	 * @return a {@link java.util.List} object.
	 */
	List<IActivity> getPrimaryActions();

	/**
	 * There is always a root observation/artifact, with consumer = the user.
	 *
	 * @return a {@link org.integratedmodelling.klab.api.provenance.IArtifact}
	 *         object.
	 */
	IArtifact getRootArtifact();

	/**
	 * Return all artifacts.
	 *
	 * @return a {@link java.util.Collection} object.
	 */
	Collection<IArtifact> getArtifacts();

}
